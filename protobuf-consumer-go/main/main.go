package main

import (
	"fmt"
	"google.golang.org/protobuf/types/known/anypb"
	"protobuf-consumer-go/model"
)

func main() {
	fmt.Println("Hackathon 2023! protobuf GO consumer")

	fmt.Println("**************************************************")
	fmt.Println("*          EVENT generated by protobuf:          *")
	fmt.Println("**************************************************")
	event := createEvent()
	fmt.Print(eventEnvelopeToString(&event))
	fmt.Println("**************************************************")
}

func createEvent() model.EventEnvelope {
	return model.EventEnvelope{
		InstanceId:       "SomeId",
		EventId:          "SomeEventId",
		Severity:         model.EventEnvelope_INFORMATION,
		EventType:        "AWESOME PROJECT",
		UserName:         "champion",
		SourceComponent:  "SourceComponent",
		SourceDeviceRef:  "SourceDeviceRef",
		SourceDeviceName: "SourceDeviceName",
		SourceIp:         "SourceIp",
		DestinationIp:    "DestinationIp",
		Operation:        "Operation",
		Auditable:        true,
		ResponseState:    "ResponseState",
		ResourceRef:      "ResourceRef",
		CorrelationIds:   map[string]string{"CorrelationIds": "value"},
		ParameterData:    map[string]*anypb.Any{},
		AdditionalData:   map[string]*anypb.Any{},
	}
}

func eventEnvelopeToString(event *model.EventEnvelope) string {
	result := fmt.Sprintf("Instance ID: %s\n", event.InstanceId)
	result += fmt.Sprintf("Event ID: %s\n", event.EventId)
	result += fmt.Sprintf("Severity: %s\n", event.Severity)
	result += fmt.Sprintf("Event Type: %s\n", event.EventType)
	result += fmt.Sprintf("User Name: %s\n", event.UserName)
	result += fmt.Sprintf("Source Component: %s\n", event.SourceComponent)
	result += fmt.Sprintf("Source Device Ref: %s\n", event.SourceDeviceRef)
	result += fmt.Sprintf("Source Device Name: %s\n", event.SourceDeviceName)
	result += fmt.Sprintf("Source IP: %s\n", event.SourceIp)
	result += fmt.Sprintf("Destination IP: %s\n", event.DestinationIp)
	result += fmt.Sprintf("Operation: %s\n", event.Operation)
	result += fmt.Sprintf("Auditable: %v\n", event.Auditable)
	result += fmt.Sprintf("Response State: %s\n", event.ResponseState)
	result += fmt.Sprintf("Resource Ref: %s\n", event.ResourceRef)

	// Add Correlation IDs
	result += "Correlation IDs:\n"
	for key, value := range event.CorrelationIds {
		result += fmt.Sprintf("  %s: %s\n", key, value)
	}

	// Add Parameter Data
	result += "Parameter Data:\n"
	for key, value := range event.ParameterData {
		result += fmt.Sprintf("  %s: %v\n", key, value)
	}

	// Add Additional Data
	result += "Additional Data:\n"
	for key, value := range event.AdditionalData {
		result += fmt.Sprintf("  %s: %v\n", key, value)
	}

	return result
}
